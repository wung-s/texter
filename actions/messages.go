package actions

import (
	"github.com/campaignctrl/textcampaign/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Message)
// DB Table: Plural (messages)
// Resource: Plural (Messages)
// Path: Plural (/messages)
// View Template Folder: Plural (/templates/messages/)

// MessagesList gets all Messages. This function is mapped to the path
// GET /messages
func MessagesList(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	messages := &models.Messages{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Messages from the DB
	if err := q.All(messages); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, messages))
}

// MessagesCreate adds a Message to the DB. This function is mapped to the
// path POST /messages
func MessagesCreate(c buffalo.Context) error {
	// Allocate an empty Message
	message := &models.Message{}
	// Bind message to the html form elements
	if err := c.Bind(message); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	cn := &models.Conversation{}
	withPriorRecord, _ := tx.Where("sender_no = ?", message.From).Order("created_at").Exists("messages")
	if withPriorRecord {
		q := tx.Q().LeftJoin("messages", "conversations.id=messages.conversation_id").Where("conversations.status = ?", models.ConvPending).Order("created_at DESC")
		exist, _ := q.Exists(cn)
		if exist {
			q.First(cn)
		} else {
			cn.Create(tx)
		}

		message.ConversationID = cn.ID
	} else {
		cn.Create(tx)
	}

	message.ConversationID = cn.ID
	verrs, err := tx.ValidateAndCreate(message)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		return c.Render(422, r.JSON(verrs))
	}

	return c.Render(200, r.JSON(message))
}
